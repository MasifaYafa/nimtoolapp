# Generated by Django 4.2.7 on 2025-09-18 04:04

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='SystemLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField()),
                ('level', models.CharField(choices=[('debug', 'Debug'), ('info', 'Info'), ('warning', 'Warning'), ('error', 'Error'), ('critical', 'Critical')], max_length=20)),
                ('source', models.CharField(choices=[('system', 'System'), ('network', 'Network'), ('application', 'Application'), ('security', 'Security'), ('device', 'Device')], max_length=20)),
                ('message', models.TextField()),
                ('component', models.CharField(blank=True, help_text='System component', max_length=100)),
                ('device_id', models.IntegerField(blank=True, help_text='Related device ID', null=True)),
                ('user_id', models.IntegerField(blank=True, help_text='Related user ID', null=True)),
                ('raw_log', models.TextField(blank=True, help_text='Original raw log entry')),
                ('tags', models.JSONField(default=list, help_text='Log tags for categorization')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'system_logs',
                'ordering': ['-timestamp'],
                'indexes': [models.Index(fields=['level', '-timestamp'], name='system_logs_level_837293_idx'), models.Index(fields=['source', '-timestamp'], name='system_logs_source_991640_idx'), models.Index(fields=['device_id', '-timestamp'], name='system_logs_device__a42f1e_idx')],
            },
        ),
        migrations.CreateModel(
            name='SystemHealth',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cpu_usage', models.FloatField(help_text='CPU usage percentage')),
                ('memory_usage', models.FloatField(help_text='Memory usage percentage')),
                ('disk_usage', models.FloatField(help_text='Disk usage percentage')),
                ('network_usage', models.FloatField(help_text='Network usage percentage')),
                ('network_interfaces', models.JSONField(default=list, help_text='Network interfaces status')),
                ('system_load', models.JSONField(default=dict, help_text='System load averages')),
                ('processes_count', models.IntegerField(default=0)),
                ('uptime_seconds', models.BigIntegerField(default=0)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'system_health',
                'ordering': ['-timestamp'],
                'indexes': [models.Index(fields=['-timestamp'], name='system_heal_timesta_59a816_idx')],
            },
        ),
        migrations.CreateModel(
            name='DiagnosticTest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('test_type', models.CharField(choices=[('connectivity', 'Internet Connectivity'), ('speed', 'Network Speed'), ('security', 'Security Scan'), ('performance', 'Performance Analysis'), ('health_check', 'Health Check')], max_length=20)),
                ('status', models.CharField(choices=[('running', 'Running'), ('completed', 'Completed'), ('failed', 'Failed')], default='running', max_length=20)),
                ('started_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('results', models.JSONField(default=dict, help_text='Diagnostic results')),
                ('score', models.IntegerField(blank=True, help_text='Overall score (0-100)', null=True)),
                ('issues_found', models.JSONField(default=list, help_text='Issues discovered')),
                ('recommendations', models.JSONField(default=list, help_text='Recommended actions')),
                ('initiated_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='diagnostic_tests', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'diagnostic_tests',
                'ordering': ['-started_at'],
            },
        ),
        migrations.CreateModel(
            name='NetworkTest',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('test_type', models.CharField(choices=[('ping', 'Ping Test'), ('traceroute', 'Traceroute'), ('port_scan', 'Port Scan'), ('dns_lookup', 'DNS Lookup'), ('speed_test', 'Speed Test'), ('connectivity', 'Connectivity Test')], max_length=20)),
                ('target', models.CharField(help_text='Target IP/hostname', max_length=255)),
                ('parameters', models.JSONField(default=dict, help_text='Test parameters (ports, count, etc.)')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('running', 'Running'), ('completed', 'Completed'), ('failed', 'Failed')], default='pending', max_length=20)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('results', models.JSONField(default=dict, help_text='Test results data')),
                ('success', models.BooleanField(default=False)),
                ('error_message', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('initiated_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='network_tests', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'network_tests',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['test_type', 'status'], name='network_tes_test_ty_aac5a8_idx'), models.Index(fields=['initiated_by', '-created_at'], name='network_tes_initiat_bbf85b_idx')],
            },
        ),
        migrations.CreateModel(
            name='CommonIssue',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('severity', models.CharField(choices=[('info', 'Info'), ('warning', 'Warning'), ('critical', 'Critical')], max_length=20)),
                ('status', models.CharField(choices=[('active', 'Active'), ('resolved', 'Resolved'), ('ignored', 'Ignored')], default='active', max_length=20)),
                ('affected_devices', models.JSONField(default=list, help_text='List of affected device IDs')),
                ('symptoms', models.JSONField(default=list, help_text='List of symptoms detected')),
                ('recommended_solution', models.TextField()),
                ('resolution_steps', models.JSONField(default=list, help_text='Step-by-step resolution')),
                ('auto_fix_available', models.BooleanField(default=False)),
                ('first_detected', models.DateTimeField(auto_now_add=True)),
                ('last_seen', models.DateTimeField(auto_now=True)),
                ('resolved_at', models.DateTimeField(blank=True, null=True)),
                ('resolved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'common_issues',
                'ordering': ['-first_detected'],
                'indexes': [models.Index(fields=['severity', 'status'], name='common_issu_severit_3782fb_idx'), models.Index(fields=['-first_detected'], name='common_issu_first_d_3d0ab5_idx')],
            },
        ),
    ]
