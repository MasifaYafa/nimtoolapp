"""
PDF report generator for NIM-Tool.
Generates professional PDF reports using ReportLab.
"""

from reportlab.lib import colors
from reportlab.lib.pagesizes import A4
from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph, Spacer
from reportlab.platypus.flowables import PageBreak
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
from reportlab.graphics.shapes import Drawing
from reportlab.graphics.charts.barcharts import VerticalBarChart
from reportlab.graphics.charts.piecharts import Pie
from reportlab.lib.colors import HexColor
from django.utils import timezone
from datetime import datetime


def _fmt_dt(dt, short=False):
    if not dt:
        return "N/A"
    if isinstance(dt, datetime):
        return dt.strftime("%Y-%m-%d" if short else "%Y-%m-%d %H:%M:%S")
    return str(dt)


def _first(item, *keys, default=None):
    for k in keys:
        if k in item and item[k] is not None:
            return item[k]
    return default


def _round(val, nd=2):
    try:
        return round(float(val), nd)
    except Exception:
        return 0


class PDFGenerator:
    """Generate PDF reports with professional formatting."""

    def __init__(self):
        self.styles = getSampleStyleSheet()
        self.page_width, self.page_height = A4
        self.margin = 0.75 * inch

        self.title_style = ParagraphStyle(
            "CustomTitle", parent=self.styles["Title"], fontSize=24,
            spaceAfter=30, textColor=HexColor("#2c3e50")
        )
        self.heading_style = ParagraphStyle(
            "CustomHeading", parent=self.styles["Heading2"], fontSize=16,
            spaceAfter=12, textColor=HexColor("#34495e")
        )
        self.body_style = ParagraphStyle(
            "CustomBody", parent=self.styles["Normal"], fontSize=11, leading=14
        )

    # ----------------------------------------------------------------- public
    def generate(self, report, data, file_path):
        try:
            doc = SimpleDocTemplate(
                file_path, pagesize=A4,
                rightMargin=self.margin, leftMargin=self.margin,
                topMargin=self.margin, bottomMargin=self.margin
            )

            story = []
            story.extend(self._header(report))
            story.append(Spacer(1, 20))
            story.extend(self._summary(report, data))
            story.append(Spacer(1, 20))
            story.extend(self._table(report, data))

            if getattr(report.template, "include_charts", False) and data:
                story.append(PageBreak())
                story.extend(self._charts(report, data))

            story.append(Spacer(1, 30))
            story.extend(self._footer(report))

            doc.build(story)
        except Exception as e:
            raise Exception(f"PDF generation failed: {str(e)}")

    # ---------------------------------------------------------------- sections
    def _header(self, report):
        parts = [Paragraph(f"NIM-Tool Report: {report.name}", self.title_style)]

        info = [
            ["Report Type:", report.template.name],
            ["Category:", report.template.get_category_display()],
            ["Generated By:", report.generated_by.get_full_name() or report.generated_by.username],
            ["Generated On:", timezone.localtime(report.created_at).strftime("%Y-%m-%d %H:%M:%S")],
            ["Date Range:", f"{report.date_range_start.strftime('%Y-%m-%d')} to {report.date_range_end.strftime('%Y-%m-%d')}"],
        ]
        if getattr(report, "description", ""):
            info.append(["Description:", report.description])

        table = Table(info, colWidths=[2 * inch, 4 * inch])
        table.setStyle(TableStyle([
            ("FONTNAME", (0, 0), (-1, -1), "Helvetica"),
            ("FONTSIZE", (0, 0), (-1, -1), 10),
            ("FONTNAME", (0, 0), (0, -1), "Helvetica-Bold"),
            ("ALIGN", (0, 0), (-1, -1), "LEFT"),
            ("VALIGN", (0, 0), (-1, -1), "TOP"),
            ("GRID", (0, 0), (-1, -1), 0.5, colors.grey),
            ("BACKGROUND", (0, 0), (0, -1), HexColor("#f8f9fa")),
        ]))
        parts.append(table)
        return parts

    def _summary(self, report, data):
        parts = [Paragraph("Executive Summary", self.heading_style)]
        if not data:
            parts.append(Paragraph("No data available for the specified date range and filters.", self.body_style))
            return parts

        cat = report.template.category
        count = len(data) if isinstance(data, list) else 1

        if cat == "uptime":
            avg_up = sum(_first(d, "uptime_percentage", default=0) for d in data) / max(count, 1)
            inc = sum(d.get("incidents", 0) for d in data)
            text = f"This uptime report covers {count} devices. Average uptime is {avg_up:.2f}%. Total incidents: {inc}."
        elif cat == "alerts":
            resolved = len([d for d in data if d.get("resolved_at")])
            rate = (resolved / count * 100) if count else 0
            text = f"{count} alerts generated. {resolved} resolved ({rate:.1f}% resolution rate)."
        elif cat == "performance":
            avgs = [_first(d, "avg_response_time", "avg_response_time_ms", default=0) for d in data]
            overall = sum(avgs) / max(len(avgs), 1) if avgs else 0
            text = f"This performance report covers {count} devices. Average response time: {overall:.2f} ms."
        elif cat == "inventory":
            active = len([d for d in data if d.get("is_active", True)])
            text = f"This inventory report shows {count} total devices, with {active} currently active."
        else:
            text = f"This report contains {count} data points."

        parts.append(Paragraph(text, self.body_style))
        return parts

    def _table(self, report, data):
        parts = [Paragraph("Detailed Data", self.heading_style)]

        if not data:
            parts.append(Paragraph("No data available for the specified criteria.", self.body_style))
            return parts

        headers, rows = self._table_rows(report, data)
        num_cols = len(headers)
        width = self.page_width - (2 * self.margin)
        col_w = width / max(num_cols, 1)

        table = Table([headers] + rows, colWidths=[col_w] * num_cols, repeatRows=1)
        table.setStyle(TableStyle([
            ("BACKGROUND", (0, 0), (-1, 0), HexColor("#3498db")),
            ("TEXTCOLOR", (0, 0), (-1, 0), colors.white),
            ("FONTNAME", (0, 0), (-1, 0), "Helvetica-Bold"),
            ("FONTSIZE", (0, 0), (-1, 0), 10),
            ("ALIGN", (0, 0), (-1, -1), "CENTER"),
            ("VALIGN", (0, 0), (-1, -1), "MIDDLE"),
            ("BACKGROUND", (0, 1), (-1, -1), colors.white),
            ("FONTNAME", (0, 1), (-1, -1), "Helvetica"),
            ("FONTSIZE", (0, 1), (-1, -1), 9),
            ("GRID", (0, 0), (-1, -1), 0.5, colors.grey),
            ("ROWBACKGROUNDS", (0, 1), (-1, -1), [colors.white, HexColor("#f8f9fa")]),
        ]))
        parts.append(table)
        return parts

    def _table_rows(self, report, data):
        cat = report.template.category

        if cat == "uptime":
            headers = ["Device", "Hostname", "Uptime %", "Total Checks", "Failed Checks", "Incidents"]
            rows = [
                [
                    it.get("device_name", "N/A"),
                    it.get("device_hostname", "N/A"),
                    f"{_round(_first(it, 'uptime_percentage', default=0), 2):.2f}%",
                    str(it.get("total_checks", 0)),
                    str(it.get("failed_checks", 0)),
                    str(it.get("incidents", 0)),
                ]
                for it in data
            ]

        elif cat == "alerts":
            headers = ["Device", "Severity", "Status", "Created", "Message"]
            rows = [
                [
                    it.get("device_name", "N/A"),
                    str(it.get("severity", "N/A")).upper(),
                    str(it.get("status", "N/A")).title(),
                    _fmt_dt(it.get("created_at")),
                    (it.get("message", "N/A")[:50] + "...") if len(it.get("message", "")) > 50 else it.get("message", "N/A"),
                ]
                for it in data
            ]

        elif cat == "performance":
            headers = ["Device", "Hostname", "Avg Response (ms)", "Min Response (ms)", "Max Response (ms)", "Total Metrics"]
            rows = [
                [
                    it.get("device_name", "N/A"),
                    it.get("device_hostname", "N/A"),
                    f"{_round(_first(it, 'avg_response_time', 'avg_response_time_ms'), 2):.2f}",
                    f"{_round(_first(it, 'min_response_time', 'min_response_time_ms'), 2):.2f}",
                    f"{_round(_first(it, 'max_response_time', 'max_response_time_ms'), 2):.2f}",
                    str(it.get("total_metrics", 0)),
                ]
                for it in data
            ]

        elif cat == "inventory":
            headers = ["Device", "Hostname", "IP Address", "Type", "Location", "Status"]
            rows = [
                [
                    it.get("device_name", "N/A"),
                    it.get("hostname", "N/A"),
                    it.get("ip_address", "N/A"),
                    it.get("device_type", "N/A"),
                    it.get("location", "N/A"),
                    "Active" if it.get("is_active") else "Inactive",
                ]
                for it in data
            ]
        else:
            if data and isinstance(data, list) and isinstance(data[0], dict):
                headers = list(data[0].keys())
                rows = [[str(it.get(k, "N/A")) for k in headers] for it in data]
            else:
                headers, rows = ["Data"], [["No data available"]]

        return headers, rows

    # ---------------------------------------------------------------- charts
    def _charts(self, report, data):
        parts = [Paragraph("Charts and Visualizations", self.heading_style)]
        cat = report.template.category

        if cat == "uptime":
            d = Drawing(400, 300)
            chart = VerticalBarChart()
            chart.x, chart.y, chart.height, chart.width = 50, 50, 200, 300

            top = data[:10]
            chart.data = [[_round(_first(it, "uptime_percentage", default=0), 2) for it in top]]
            chart.categoryAxis.categoryNames = [it.get("device_name", "Unknown")[:10] for it in top]
            chart.categoryAxis.labels.angle = 45
            chart.categoryAxis.labels.fontSize = 8
            chart.valueAxis.valueMin = 0
            chart.valueAxis.valueMax = 100
            chart.valueAxis.labels.fontSize = 8
            chart.bars[0].fillColor = HexColor("#3498db")

            d.add(chart)
            parts.append(d)

        elif cat == "alerts":
            counts = {}
            for it in data:
                sev = str(it.get("severity", "unknown")).title()
                counts[sev] = counts.get(sev, 0) + 1
            if counts:
                d = Drawing(400, 300)
                pie = Pie()
                pie.x, pie.y, pie.width, pie.height = 150, 100, 100, 100
                pie.data = list(counts.values())
                pie.labels = list(counts.keys())
                pie.slices.strokeWidth = 0.5
                parts.append(d)
                d.add(pie)

        return parts

    def _footer(self, report):
        text = (
            f"Generated by NIM-Tool on {timezone.now().strftime('%Y-%m-%d %H:%M:%S')} | "
            f"Report ID: {report.id} | Data Points: {report.data_points or 'N/A'}"
        )
        p = Paragraph(text, ParagraphStyle("Footer", parent=self.body_style, fontSize=8, textColor=colors.grey, alignment=1))
        return [p]
