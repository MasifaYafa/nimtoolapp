# apps/reports/generators/csv.py
"""
CSV report generator for NIM-Tool.
Generates CSV reports for easy data analysis and import.
"""
import csv
from datetime import datetime
from django.utils import timezone


def _fmt_dt(dt):
    if not dt:
        return ""
    if isinstance(dt, datetime):
        return dt.strftime("%Y-%m-%d %H:%M:%S")
    return str(dt)


def _first(item, *keys, default=None):
    for k in keys:
        if k in item and item[k] is not None:
            return item[k]
    return default


def _round(val, nd=2):
    try:
        return round(float(val), nd)
    except Exception:
        return val if val is not None else ""


class CSVGenerator:
    """Generate CSV reports with proper formatting and metadata."""

    def __init__(self):
        # UTF-8 with BOM so Excel opens cleanly
        self.encoding = "utf-8-sig"

    def generate(self, report, data, file_path):
        try:
            with open(file_path, "w", newline="", encoding=self.encoding) as csvfile:
                self._write_metadata(csvfile, report)
                writer = csv.writer(csvfile)

                if not data:
                    writer.writerow(["Message"])
                    writer.writerow(["No data available for the specified criteria"])
                    return

                headers, rows = self._format_data_for_csv(report, data)
                writer.writerow(headers)
                writer.writerows(rows)
        except Exception as e:
            raise Exception(f"CSV generation failed: {str(e)}")

    def _write_metadata(self, csvfile, report):
        lines = [
            "# NIM-Tool Network Monitoring Report",
            f"# Report Name: {report.name}",
            f"# Report Type: {report.template.name}",
            f"# Category: {report.template.get_category_display()}",
            f"# Generated By: {report.generated_by.get_full_name() or report.generated_by.username}",
            f"# Generated On: {timezone.localtime(report.created_at).strftime('%Y-%m-%d %H:%M:%S')}",
            f"# Date Range: {report.date_range_start.strftime('%Y-%m-%d')} to {report.date_range_end.strftime('%Y-%m-%d')}",
            f"# Status: {report.get_status_display()}",
            f"# Data Points: {report.data_points if report.data_points else 'N/A'}",
            f"# Report ID: {report.id}",
            "#",
        ]
        if getattr(report, "description", ""):
            lines.insert(-1, f"# Description: {report.description}")

        for line in lines:
            csvfile.write(line + "\n")

    def _format_data_for_csv(self, report, data):
        cat = report.template.category

        if cat == "uptime":
            return self._format_uptime_data(data)
        if cat == "alerts":
            return self._format_alerts_data(data)
        if cat == "performance":
            return self._format_performance_data(data)
        if cat == "inventory":
            return self._format_inventory_data(data)
        if cat == "bandwidth":
            return self._format_bandwidth_data(data)
        if cat == "security":
            return self._format_security_data(data)
        return self._format_generic_data(data)

    def _format_uptime_data(self, data):
        headers = [
            "Device ID", "Device Name", "Hostname", "Device Type",
            "Uptime Percentage", "Total Checks", "Successful Checks",
            "Failed Checks", "Incidents Count", "First Check Time", "Last Check Time",
        ]
        rows = []
        for it in data:
            rows.append([
                it.get("device_id", ""),
                it.get("device_name", ""),
                it.get("device_hostname", ""),
                it.get("device_type", ""),
                _round(_first(it, "uptime_percentage", default=0), 2),
                it.get("total_checks", 0),
                it.get("successful_checks", 0),
                it.get("failed_checks", 0),
                it.get("incidents", 0),
                _fmt_dt(it.get("first_check")),
                _fmt_dt(it.get("last_check")),
            ])
        return headers, rows

    def _format_alerts_data(self, data):
        headers = [
            "Alert ID", "Device Name", "Device Hostname", "Severity", "Status",
            "Message", "Created Date", "Acknowledged Date", "Resolved Date",
            "Response Time (minutes)", "Resolution Time (minutes)",
        ]
        rows = []
        for it in data:
            rows.append([
                it.get("alert_id", ""),
                it.get("device_name", ""),
                it.get("device_hostname", ""),
                str(it.get("severity", "")).upper(),
                str(it.get("status", "")).title(),
                str(it.get("message", "")).replace("\n", " ").replace("\r", " "),
                _fmt_dt(it.get("created_at")),
                _fmt_dt(it.get("acknowledged_at")),
                _fmt_dt(it.get("resolved_at")),
                _round(_first(it, "response_time", "response_time_mins"), 2) or "",
                _round(_first(it, "resolution_time", "resolution_time_mins"), 2) or "",
            ])
        return headers, rows

    def _format_performance_data(self, data):
        headers = [
            "Device ID", "Device Name", "Hostname", "Device Type",
            "Average Response Time (ms)", "Minimum Response Time (ms)",
            "Maximum Response Time (ms)", "Total Metrics Count",
        ]
        rows = []
        for it in data:
            rows.append([
                it.get("device_id", ""),
                it.get("device_name", ""),
                it.get("device_hostname", ""),
                it.get("device_type", ""),
                _round(_first(it, "avg_response_time", "avg_response_time_ms"), 2),
                _round(_first(it, "min_response_time", "min_response_time_ms"), 2),
                _round(_first(it, "max_response_time", "max_response_time_ms"), 2),
                it.get("total_metrics", 0),
            ])
        return headers, rows

    def _format_inventory_data(self, data):
        headers = [
            "Device ID", "Device Name", "Hostname", "IP Address", "Device Type",
            "Location", "Description", "Status", "Is Active", "Created Date",
            "Last Seen", "Current Status",
        ]
        rows = []
        for it in data:
            rows.append([
                it.get("device_id", ""),
                it.get("device_name", ""),
                it.get("hostname", ""),
                it.get("ip_address", ""),
                it.get("device_type", ""),
                it.get("location", ""),
                str(it.get("description", "")).replace("\n", " ").replace("\r", " "),
                "Active" if it.get("is_active") else "Inactive",
                "Yes" if it.get("is_active") else "No",
                _fmt_dt(it.get("created_at"))[:10] if it.get("created_at") else "",
                _fmt_dt(it.get("last_seen")) or "Never",
                it.get("current_status", ""),
            ])
        return headers, rows

    def _format_bandwidth_data(self, data):
        headers = [
            "Device ID", "Device Name", "Hostname", "Interface",
            "Average Usage (%)", "Peak Usage (%)", "Total Bytes In",
            "Total Bytes Out", "Average Speed (Mbps)", "Peak Speed (Mbps)",
            "Utilization Period",
        ]
        rows = []
        for it in data:
            rows.append([
                it.get("device_id", ""),
                it.get("device_name", ""),
                it.get("hostname", ""),
                it.get("interface", ""),
                _round(it.get("avg_usage_percent", 0), 2),
                _round(it.get("peak_usage_percent", 0), 2),
                it.get("total_bytes_in", 0),
                it.get("total_bytes_out", 0),
                _round(it.get("avg_speed_mbps", 0), 2),
                _round(it.get("peak_speed_mbps", 0), 2),
                it.get("period_hours", 0),
            ])
        return headers, rows

    def _format_security_data(self, data):
        headers = [
            "Event ID", "Device Name", "Hostname", "Event Type", "Severity Level",
            "Source IP", "Destination IP", "Port", "Protocol", "Event Time",
            "Description", "Action Taken", "Status",
        ]
        rows = []
        for it in data:
            rows.append([
                it.get("event_id", ""),
                it.get("device_name", ""),
                it.get("hostname", ""),
                it.get("event_type", ""),
                it.get("severity_level", ""),
                it.get("source_ip", ""),
                it.get("destination_ip", ""),
                it.get("port", ""),
                it.get("protocol", ""),
                _fmt_dt(it.get("event_time")),
                str(it.get("description", "")).replace("\n", " ").replace("\r", " "),
                it.get("action_taken", ""),
                it.get("status", ""),
            ])
        return headers, rows

    def _format_generic_data(self, data):
        if not data or not isinstance(data, list):
            return ["Message"], [["No data available"]]

        keys = set()
        for it in data:
            if isinstance(it, dict):
                keys.update(it.keys())
        headers = sorted(keys)

        rows = []
        for it in data:
            row = []
            for k in headers:
                v = it.get(k, "") if isinstance(it, dict) else it
                if isinstance(v, datetime):
                    v = v.strftime("%Y-%m-%d %H:%M:%S")
                elif isinstance(v, bool):
                    v = "Yes" if v else "No"
                elif v is None:
                    v = ""
                else:
                    v = str(v).replace("\n", " ").replace("\r", " ")
                row.append(v)
            rows.append(row)
        return headers, rows
