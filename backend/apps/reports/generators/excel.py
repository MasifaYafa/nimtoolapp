# apps/reports/generators/excel.py
"""
Excel report generator for NIM-Tool.
Generates Excel reports with formatting and charts using openpyxl.
"""
from openpyxl import Workbook
from openpyxl.styles import Font, Alignment, PatternFill, Border, Side
from openpyxl.chart import BarChart, PieChart, Reference
from django.utils import timezone
from datetime import datetime


def _fmt_dt(dt, short=False):
    if not dt:
        return "N/A"
    if isinstance(dt, datetime):
        return dt.strftime("%Y-%m-%d" if short else "%Y-%m-%d %H:%M:%S")
    return str(dt)


def _first(item, *keys, default=None):
    for k in keys:
        if k in item and item[k] is not None:
            return item[k]
    return default


def _round(val, nd=2):
    try:
        return round(float(val), nd)
    except Exception:
        return 0


class ExcelGenerator:
    """Generate Excel reports with professional formatting and charts."""

    def __init__(self):
        # Styles
        self.header_font = Font(name="Arial", size=12, bold=True, color="FFFFFF")
        self.title_font = Font(name="Arial", size=16, bold=True, color="2C3E50")
        self.normal_font = Font(name="Arial", size=10)
        self.small_bold = Font(name="Arial", size=10, bold=True)

        self.header_fill = PatternFill(start_color="3498DB", end_color="3498DB", fill_type="solid")

        self.center = Alignment(horizontal="center", vertical="center")
        self.left = Alignment(horizontal="left", vertical="center")

        self.thin = Border(
            left=Side(style="thin"),
            right=Side(style="thin"),
            top=Side(style="thin"),
            bottom=Side(style="thin"),
        )

    def generate(self, report, data, file_path):
        """
        Generate Excel report (*always* save as .xlsx).
        """
        try:
            # Ensure the file ends with .xlsx for openpyxl
            if not str(file_path).lower().endswith(".xlsx"):
                file_path = f"{file_path}.xlsx"

            wb = Workbook()
            wb.remove(wb.active)

            self._summary_sheet(wb, report, data)
            self._data_sheet(wb, report, data)

            if getattr(report.template, "include_charts", False) and data:
                self._charts_sheet(wb, report, data)

            wb.save(file_path)
        except Exception as e:
            raise Exception(f"Excel generation failed: {str(e)}")

    # ------------------------------- summary
    def _summary_sheet(self, wb, report, data):
        ws = wb.create_sheet(title="Summary")

        ws["A1"] = "NIM-Tool Network Monitoring Report"
        ws["A1"].font = self.title_font

        info = [
            ("Report Name:", report.name),
            ("Report Type:", report.template.name),
            ("Category:", report.template.get_category_display()),
            ("Generated By:", report.generated_by.get_full_name() or report.generated_by.username),
            ("Generated On:", timezone.localtime(report.created_at).strftime("%Y-%m-%d %H:%M:%S")),
            ("Date Range:", f"{report.date_range_start.strftime('%Y-%m-%d')} to {report.date_range_end.strftime('%Y-%m-%d')}"),
            ("Status:", report.get_status_display()),
            ("Data Points:", str(report.data_points or "N/A")),
        ]
        if getattr(report, "description", ""):
            info.append(("Description:", report.description))

        r = 3
        for label, value in info:
            ws[f"A{r}"] = label
            ws[f"A{r}"].font = self.small_bold
            ws[f"B{r}"] = value
            ws[f"A{r}"].border = ws[f"B{r}"].border = self.thin
            r += 1

        ws.column_dimensions["A"].width = 22
        ws.column_dimensions["B"].width = 40

    # ------------------------------- data
    def _data_sheet(self, wb, report, data):
        ws = wb.create_sheet(title="Data")

        if not data:
            ws["A1"] = "No data available for the specified criteria."
            ws["A1"].font = self.normal_font
            return

        headers, rows = self._format_rows(report, data)

        # headers
        for c, h in enumerate(headers, 1):
            cell = ws.cell(row=1, column=c, value=h)
            cell.font = self.header_font
            cell.fill = self.header_fill
            cell.alignment = self.center
            cell.border = self.thin

        # rows
        for r_idx, row in enumerate(rows, 2):
            for c_idx, val in enumerate(row, 1):
                cell = ws.cell(row=r_idx, column=c_idx, value=val)
                cell.font = self.normal_font
                cell.alignment = self.left
                cell.border = self.thin

        # auto width
        for col in ws.columns:
            max_len = max(len(str(cell.value)) for cell in col if cell.value)
            ws.column_dimensions[col[0].column_letter].width = min(max_len + 2, 50)

        ws.freeze_panes = "A2"

    def _format_rows(self, report, data):
        cat = report.template.category

        if cat == "uptime":
            headers = ["Device", "Hostname", "Uptime %", "Total Checks", "Failed Checks", "Incidents", "Device Type"]
            rows = []
            for it in data:
                rows.append([
                    it.get("device_name", "N/A"),
                    it.get("device_hostname", "N/A"),
                    _round(_first(it, "uptime_percentage"), 2),
                    it.get("total_checks", 0),
                    it.get("failed_checks", 0),
                    it.get("incidents", 0),
                    it.get("device_type", "N/A"),
                ])

        elif cat == "alerts":
            headers = ["Device", "Hostname", "Severity", "Status", "Created", "Message",
                       "Response Time (min)", "Resolution Time (min)"]
            rows = []
            for it in data:
                rows.append([
                    it.get("device_name", "N/A"),
                    it.get("device_hostname", "N/A"),
                    str(it.get("severity", "N/A")).upper(),
                    str(it.get("status", "N/A")).title(),
                    _fmt_dt(it.get("created_at")),
                    it.get("message", "N/A"),
                    _round(_first(it, "response_time", "response_time_mins"), 2) or None,
                    _round(_first(it, "resolution_time", "resolution_time_mins"), 2) or None,
                ])

        elif cat == "performance":
            headers = ["Device", "Hostname", "Device Type",
                       "Avg Response (ms)", "Min Response (ms)", "Max Response (ms)", "Total Metrics"]
            rows = []
            for it in data:
                rows.append([
                    it.get("device_name", "N/A"),
                    it.get("device_hostname", "N/A"),
                    it.get("device_type", "N/A"),
                    _round(_first(it, "avg_response_time", "avg_response_time_ms"), 2),
                    _round(_first(it, "min_response_time", "min_response_time_ms"), 2),
                    _round(_first(it, "max_response_time", "max_response_time_ms"), 2),
                    it.get("total_metrics", 0),
                ])

        elif cat == "inventory":
            headers = ["Device", "Hostname", "IP Address", "Device Type", "Location",
                       "Status", "Created Date", "Last Seen"]
            rows = []
            for it in data:
                rows.append([
                    it.get("device_name", "N/A"),
                    it.get("hostname", "N/A"),
                    it.get("ip_address", "N/A"),
                    it.get("device_type", "N/A"),
                    it.get("location", "Not specified"),
                    "Active" if it.get("is_active") else "Inactive",
                    _fmt_dt(it.get("created_at"), short=True),
                    _fmt_dt(it.get("last_seen")),
                ])

        else:
            # Generic
            if data and isinstance(data, list) and isinstance(data[0], dict):
                headers = list(data[0].keys())
                rows = []
                for it in data:
                    row = []
                    for k in headers:
                        v = it.get(k, "")
                        if isinstance(v, datetime):
                            v = v.strftime("%Y-%m-%d %H:%M:%S")
                        elif v is None:
                            v = ""
                        row.append(v)
                    rows.append(row)
            else:
                headers = ["Message"]
                rows = [["No data available"]]

        return headers, rows

    # ------------------------------- charts
    def _charts_sheet(self, wb, report, data):
        ws = wb.create_sheet(title="Charts")
        cat = report.template.category

        if cat == "uptime":
            top = sorted(data, key=lambda x: _first(x, "uptime_percentage", default=0), reverse=True)[:10]
            ws["A1"] = "Device"
            ws["B1"] = "Uptime %"
            ws["C1"] = "Incidents"
            for i, it in enumerate(top, 2):
                ws[f"A{i}"] = it.get("device_name", "Unknown")
                ws[f"B{i}"] = _round(_first(it, "uptime_percentage", default=0), 2)
                ws[f"C{i}"] = it.get("incidents", 0)

            chart = BarChart()
            chart.title = "Device Uptime Percentage"
            chart.y_axis.title = "Uptime %"
            chart.x_axis.title = "Devices"
            data_ref = Reference(ws, min_col=2, min_row=1, max_row=len(top) + 1)
            cats = Reference(ws, min_col=1, min_row=2, max_row=len(top) + 1)
            chart.add_data(data_ref, titles_from_data=True)
            chart.set_categories(cats)
            ws.add_chart(chart, "E2")

            chart2 = BarChart()
            chart2.title = "Device Incidents Count"
            chart2.y_axis.title = "Incidents"
            data_ref2 = Reference(ws, min_col=3, min_row=1, max_row=len(top) + 1)
            chart2.add_data(data_ref2, titles_from_data=True)
            chart2.set_categories(cats)
            ws.add_chart(chart2, "E18")

        elif cat == "alerts":
            # Severity counts
            counts = {}
            for it in data:
                sev = str(it.get("severity", "unknown")).title()
                counts[sev] = counts.get(sev, 0) + 1

            ws["A1"] = "Severity"
            ws["B1"] = "Count"
            r = 2
            for k, v in counts.items():
                ws[f"A{r}"] = k
                ws[f"B{r}"] = v
                r += 1

            pie = PieChart()
            labels = Reference(ws, min_col=1, min_row=2, max_row=r - 1)
            values = Reference(ws, min_col=2, min_row=1, max_row=r - 1)
            pie.add_data(values, titles_from_data=True)
            pie.set_categories(labels)
            pie.title = "Alerts by Severity"
            ws.add_chart(pie, "D2")

        elif cat == "performance":
            top = sorted(
                data,
                key=lambda x: _first(x, "avg_response_time", "avg_response_time_ms", default=0)
            )[:10]

            ws["A1"] = "Device"
            ws["B1"] = "Avg Response (ms)"
            ws["C1"] = "Max Response (ms)"
            for i, it in enumerate(top, 2):
                ws[f"A{i}"] = it.get("device_name", "Unknown")
                ws[f"B{i}"] = _round(_first(it, "avg_response_time", "avg_response_time_ms"), 2)
                ws[f"C{i}"] = _round(_first(it, "max_response_time", "max_response_time_ms"), 2)

            chart = BarChart()
            chart.title = "Device Response Times"
            chart.y_axis.title = "Response Time (ms)"
            chart.x_axis.title = "Devices"
            data_ref = Reference(ws, min_col=2, min_row=1, max_row=len(top) + 1, max_col=3)
            cats = Reference(ws, min_col=1, min_row=2, max_row=len(top) + 1)
            chart.add_data(data_ref, titles_from_data=True)
            chart.set_categories(cats)
            ws.add_chart(chart, "E2")
