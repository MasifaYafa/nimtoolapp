"""
Alert models for NIM-Tool.
Manages network alerts, notifications, and escalations.
"""

from django.db import models
from django.utils import timezone
from django.contrib.auth import get_user_model
from apps.devices.models import Device
import uuid

User = get_user_model()


class AlertRule(models.Model):
    """
    Define rules for when alerts should be triggered.
    """

    class Severity(models.TextChoices):
        CRITICAL = 'critical', 'Critical'
        WARNING = 'warning', 'Warning'
        INFO = 'info', 'Info'

    class Condition(models.TextChoices):
        EQUALS = 'equals', 'Equals'
        GREATER_THAN = 'gt', 'Greater Than'
        LESS_THAN = 'lt', 'Less Than'
        NOT_RESPONDING = 'not_responding', 'Not Responding'
        CONTAINS = 'contains', 'Contains'

    name = models.CharField(max_length=100, help_text="Rule name")
    description = models.TextField(blank=True, help_text="Rule description")

    # Rule conditions
    metric_type = models.CharField(
        max_length=50,
        help_text="Type of metric to monitor (cpu_usage, memory_usage, etc.)"
    )
    condition = models.CharField(max_length=15, choices=Condition.choices)
    threshold_value = models.FloatField(help_text="Threshold value for comparison")

    # Alert properties
    severity = models.CharField(max_length=10, choices=Severity.choices)
    message_template = models.TextField(
        help_text="Alert message template (can use {device_name}, {value}, etc.)"
    )

    # Rule status
    is_active = models.BooleanField(default=True)
    applies_to_all_devices = models.BooleanField(
        default=False,
        help_text="Apply this rule to all devices"
    )
    specific_devices = models.ManyToManyField(
        Device,
        blank=True,
        help_text="Specific devices this rule applies to (if not all devices)"
    )

    # Notification settings
    send_email = models.BooleanField(default=True)
    send_sms = models.BooleanField(default=False)
    email_recipients = models.TextField(
        blank=True,
        help_text="Comma-separated email addresses"
    )

    # Timing
    check_interval = models.PositiveIntegerField(
        default=300,
        help_text="How often to check this rule (seconds)"
    )
    cooldown_period = models.PositiveIntegerField(
        default=300,
        help_text="Minimum time between alerts for the same condition (seconds)"
    )

    created_by = models.ForeignKey(User, on_delete=models.PROTECT, related_name='alert_rules')
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    class Meta:
        db_table = 'alert_rules'
        verbose_name = 'Alert Rule'
        verbose_name_plural = 'Alert Rules'

    def __str__(self):
        return f"{self.name} ({self.get_severity_display()})"


class Alert(models.Model):
    """
    Individual alert instances generated by monitoring.
    """

    class Status(models.TextChoices):
        ACTIVE = 'active', 'Active'
        ACKNOWLEDGED = 'acknowledged', 'Acknowledged'
        RESOLVED = 'resolved', 'Resolved'
        SUPPRESSED = 'suppressed', 'Suppressed'

    class Severity(models.TextChoices):
        CRITICAL = 'critical', 'Critical'
        WARNING = 'warning', 'Warning'
        INFO = 'info', 'Info'

    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)

    # Alert identification
    title = models.CharField(max_length=200, help_text="Alert title")
    message = models.TextField(help_text="Detailed alert message")
    severity = models.CharField(max_length=10, choices=Severity.choices)

    # Related objects
    device = models.ForeignKey(
        Device,
        on_delete=models.CASCADE,
        related_name='alerts',
        help_text="Device that triggered this alert"
    )
    alert_rule = models.ForeignKey(
        AlertRule,
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        related_name='triggered_alerts',
        help_text="Rule that generated this alert"
    )

    # Alert status
    status = models.CharField(max_length=12, choices=Status.choices, default=Status.ACTIVE)

    # Values and context
    metric_name = models.CharField(max_length=50, blank=True)
    current_value = models.FloatField(null=True, blank=True)
    threshold_value = models.FloatField(null=True, blank=True)

    # Timing
    first_occurred = models.DateTimeField(auto_now_add=True)
    last_occurred = models.DateTimeField(auto_now=True)
    occurrence_count = models.PositiveIntegerField(default=1)

    # Acknowledgment
    acknowledged_at = models.DateTimeField(null=True, blank=True)
    acknowledged_by = models.ForeignKey(
        User,
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        related_name='acknowledged_alerts'
    )
    acknowledgment_note = models.TextField(blank=True)

    # Resolution
    resolved_at = models.DateTimeField(null=True, blank=True)
    resolved_by = models.ForeignKey(
        User,
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        related_name='resolved_alerts'
    )
    resolution_note = models.TextField(blank=True)

    # Notifications
    email_sent = models.BooleanField(default=False)
    sms_sent = models.BooleanField(default=False)
    notification_count = models.PositiveIntegerField(default=0)

    class Meta:
        db_table = 'alerts'
        verbose_name = 'Alert'
        verbose_name_plural = 'Alerts'
        ordering = ['-first_occurred']
        indexes = [
            models.Index(fields=['device', 'status', '-first_occurred']),
            models.Index(fields=['severity', 'status']),
        ]

    def __str__(self):
        return f"{self.title} - {self.device.name} ({self.get_severity_display()})"

    def is_active(self):
        """Check if alert is still active"""
        return self.status == self.Status.ACTIVE

    def acknowledge(self, user, note=""):
        """Acknowledge the alert"""
        self.status = self.Status.ACKNOWLEDGED
        self.acknowledged_by = user
        self.acknowledged_at = timezone.now()
        self.acknowledgment_note = note
        self.save()

    def resolve(self, user, note=""):
        """Resolve the alert"""
        self.status = self.Status.RESOLVED
        self.resolved_by = user
        self.resolved_at = timezone.now()
        self.resolution_note = note
        self.save()

    def get_duration(self):
        """Get how long the alert has been active"""
        end_time = self.resolved_at or timezone.now()
        return end_time - self.first_occurred


class AlertNotification(models.Model):
    """
    Track notification attempts for alerts.
    """

    class Type(models.TextChoices):
        EMAIL = 'email', 'Email'
        SMS = 'sms', 'SMS'
        SLACK = 'slack', 'Slack'
        WEBHOOK = 'webhook', 'Webhook'

    class Status(models.TextChoices):
        PENDING = 'pending', 'Pending'
        SENT = 'sent', 'Sent'
        FAILED = 'failed', 'Failed'
        RETRY = 'retry', 'Retry'

    alert = models.ForeignKey(Alert, on_delete=models.CASCADE, related_name='notifications')
    type = models.CharField(max_length=10, choices=Type.choices)
    recipient = models.CharField(max_length=200, help_text="Email, phone number, or endpoint")
    status = models.CharField(max_length=10, choices=Status.choices, default=Status.PENDING)

    # Attempt tracking
    attempts = models.PositiveIntegerField(default=0)
    max_attempts = models.PositiveIntegerField(default=3)
    last_attempt = models.DateTimeField(null=True, blank=True)
    next_retry = models.DateTimeField(null=True, blank=True)

    # Response tracking
    response_code = models.CharField(max_length=10, blank=True)
    response_message = models.TextField(blank=True)

    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    class Meta:
        db_table = 'alert_notifications'
        verbose_name = 'Alert Notification'
        verbose_name_plural = 'Alert Notifications'

    def __str__(self):
        return f"{self.get_type_display()} to {self.recipient} - {self.get_status_display()}"